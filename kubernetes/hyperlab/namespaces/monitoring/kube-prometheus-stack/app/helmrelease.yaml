# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/refs/heads/main/helmrelease-helm-v2.json

apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 10m
  releaseName: *name
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 68.2.2
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    crds: Skip
    remediation:
      retries: &retries 3
  upgrade:
    cleanupOnFail: true
    crds: Skip
    remediation:
      retries: *retries
  dependsOn:
    - name: longhorn
      namespace: "longhorn-system"
    - name: prometheus-operator-crds
      namespace: monitoring
  values:
    # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
    crds:
      enabled: false

    defaultRules:
      create: true
      rules:
        kubeProxy: false
        windows: false

    # https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
    grafana:
      enabled: true
      defaultDashboardsEditable: false
      defaultDashboardsEnabled: true
      defaultDashboardsTimezone: browser

      plugins:
        - "marcusolsson-json-datasource"

      grafana.ini:
        analytics:
          check_for_updates: false
        auth:
          signout_redirect_url: "https://id.${DOMAIN_PRIVATE}/application/o/grafana/end-session/"
          oauth_auto_login: true
        auth.generic_oauth:
          name: authentik
          enabled: true
          client_id: "B0JoMGMn9FKGIoojphL6hMX8PtTt6GtCKvTdt4EN"
          client_secret: "$__file{/etc/secrets/authentik-oauth-grafana/client_secret}"
          scopes: "openid profile email"
          auth_url: "https://id.${DOMAIN_PRIVATE}/application/o/authorize/"
          token_url: "https://id.${DOMAIN_PRIVATE}/application/o/token/"
          api_url: "https://id.${DOMAIN_PRIVATE}/application/o/userinfo/"
          role_attribute_path: contains(groups, 'grafana-admin') && 'Admin' || contains(groups, 'grafana-editor') && 'Editor' || contains(groups, 'grafana-viewer') && 'Viewer'
        server:
          root_url: "https://grafana.${DOMAIN_PRIVATE}/"
        panels:
          disable_sanitize_html: true

      extraSecretMounts:
        - name: authentik-oauth-grafana-mount
          secretName: authentik-oauth-grafana
          defaultMode: 0440
          mountPath: /etc/secrets/authentik-oauth-grafana
          readOnly: true

      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/description: "Observability and data visualization platform."
          gethomepage.dev/group: Cluster
          gethomepage.dev/icon: "https://cdn.jsdelivr.net/gh/selfhst/icons/svg/grafana.svg"
          gethomepage.dev/name: "Grafana"
          gethomepage.dev/pod-selector: ""
        hosts:
          - &host "grafana.${DOMAIN_PRIVATE}"
        path: /
        tls:
          - hosts:
              - *host

      persistence:
        enabled: true
        type: sts
        storageClassName: "longhorn"
        accessModes:
          - ReadWriteOnce
        size: 5Gi
        finalizers:
          - kubernetes.io/pvc-protection

      prune: true

      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: "default"
              orgId: 1
              folder: ""
              type: file
              disableDeletion: false
              editable: false
              options:
                path: /var/lib/grafana/dashboards/default
            - name: "kubernetes"
              orgId: 1
              folder: ""
              type: file
              disableDeletion: false
              editable: false
              options:
                path: /var/lib/grafana/dashboards/kubernetes

      dashboards:
        default:
          blocky-metrics:
            gnetId: 13768
            revision: 4
            datasource:
              - { name: DS_PROMETHEUS, value: Prometheus }
        kubernetes:
          cert-manager:
            url: "https://gitlab.com/uneeq-oss/cert-manager-mixin/-/raw/master/dashboards/cert-manager.json"
            datasource: &ds Prometheus
          external-secrets:
            url: "https://raw.githubusercontent.com/external-secrets/external-secrets/main/docs/snippets/dashboard.json"
            datasource: *ds
          flux-cluster:
            url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/cluster.json
            datasource: *ds
          flux-control-plane:
            url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/control-plane.json
            datasource: *ds
          flux-logs:
            url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/logs.json
            datasource: *ds
          longhorn:
            gnetId: 16888
            revision: 9
            datasource: *ds
          nginx:
            url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
            datasource: *ds
          nginx-request-handling-performance:
            url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/request-handling-performance.json
            datasource: *ds
          spegel:
            gnetId: 18089
            revision: 1
            datasource:
              - { name: DS_PROMETHEUS, value: Prometheus }

    kubeApiServer:
      enabled: false

    kubelet:
      enabled: true
      serviceMonitor:
        cAdvisorMetricRelabelings:
          # Drop less useful container CPU metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: "container_cpu_(cfs_throttled_seconds_total|load_average_10s|system_seconds_total|user_seconds_total)"
          # Drop less useful container / always zero filesystem metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: "container_fs_(io_current|io_time_seconds_total|io_time_weighted_seconds_total|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)"
          # Drop less useful / always zero container memory metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: "container_memory_(mapped_file|swap)"
          # Drop less useful container process metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: "container_(file_descriptors|tasks_state|threads_max)"
          # Drop container spec metrics that overlap with kube-state-metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: "container_spec.*"
          # Drop cgroup metrics with no pod.
          - sourceLabels: [id, pod]
            action: drop
            regex: ".+;"

    kubeDns:
      enabled: false

    kubeProxy:
      enabled: false

    nodeExporter:
      enabled: true
      operatingSystems:
        linux:
          enabled: true
        aix:
          enabled: false
        darwin:
          enabled: false

    prometheusOperator:
      enabled: true
      prometheusSpec:
        storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 24Gi

    prometheus:
      prometheusSpec:
        retention: 30d
        retentionSize: 23GB
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 24Gi
